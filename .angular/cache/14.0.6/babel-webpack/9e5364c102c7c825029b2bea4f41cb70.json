{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"@angular/router\";\n\nfunction GridComponent_td_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const col_r2 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", col_r2.colName, \" \");\n  }\n}\n\nfunction GridComponent_tr_3_td_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const col_r5 = ctx.$implicit;\n    const colObj_r3 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", colObj_r3[col_r5.colName], \" \");\n  }\n}\n\nconst _c0 = function () {\n  return [\"/{{typeOfData}}/Add\"];\n};\n\nfunction GridComponent_tr_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"tr\");\n    i0.ɵɵtemplate(1, GridComponent_tr_3_td_1_Template, 2, 1, \"td\", 1);\n    i0.ɵɵelementStart(2, \"td\")(3, \"a\", 2);\n    i0.ɵɵlistener(\"click\", function GridComponent_tr_3_Template_a_click_3_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r8);\n      const colObj_r3 = restoredCtx.$implicit;\n      const ctx_r7 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r7.selectGrid(colObj_r3));\n    });\n    i0.ɵɵtext(4, \"select\");\n    i0.ɵɵelementEnd()()();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.gridColumns);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"routerLink\", i0.ɵɵpureFunction0(2, _c0));\n  }\n}\n\nexport let GridComponent = /*#__PURE__*/(() => {\n  class GridComponent {\n    constructor() {\n      this.gridColumns = new Array();\n      this.gridData = new Array();\n      this.typeOfData = \"\";\n      this.eventEmitter = new EventEmitter();\n    }\n\n    set setTypeOfData(v) {\n      this.typeOfData = v;\n    }\n\n    set setGridColumns(_gc) {\n      this.gridColumns = _gc;\n    }\n\n    set setGridData(_gc) {\n      this.gridData = _gc;\n    }\n\n    selectGrid(_selected) {\n      this.eventEmitter.emit(_selected);\n    }\n\n  }\n\n  GridComponent.ɵfac = function GridComponent_Factory(t) {\n    return new (t || GridComponent)();\n  };\n\n  GridComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: GridComponent,\n    selectors: [[\"grid-ui\"]],\n    inputs: {\n      setTypeOfData: [\"type-of-data\", \"setTypeOfData\"],\n      setGridColumns: [\"grid-columns\", \"setGridColumns\"],\n      setGridData: [\"grid-data\", \"setGridData\"]\n    },\n    outputs: {\n      eventEmitter: \"grid-selected\"\n    },\n    decls: 4,\n    vars: 2,\n    consts: [[\"id\", \"myTable\"], [4, \"ngFor\", \"ngForOf\"], [3, \"routerLink\", \"click\"]],\n    template: function GridComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"table\", 0)(1, \"tr\");\n        i0.ɵɵtemplate(2, GridComponent_td_2_Template, 2, 1, \"td\", 1);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(3, GridComponent_tr_3_Template, 5, 3, \"tr\", 1);\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngForOf\", ctx.gridColumns);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", ctx.gridData);\n      }\n    },\n    dependencies: [i1.NgForOf, i2.RouterLinkWithHref],\n    encapsulation: 2\n  });\n  return GridComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}